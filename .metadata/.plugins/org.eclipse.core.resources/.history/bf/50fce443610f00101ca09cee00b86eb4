package com.kh.start.configuration.filter;

import java.io.IOException;

import org.springframework.http.HttpHeaders;
import org.springframework.stereotype.Component;
import org.springframework.web.filter.OncePerRequestFilter;

import com.kh.start.auth.util.JwtUtil;

import io.jsonwebtoken.ExpiredJwtException;
import jakarta.servlet.FilterChain;
import jakarta.servlet.ServletException;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;

@Slf4j
@Component
@RequiredArgsConstructor
public class JwtFilter extends OncePerRequestFilter{

	private final JwtUtil util;
	
	@Override
	protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain)
			throws ServletException, IOException {
		log.info("나오니? 여긴 두필터 인터널");
		
		String authorization = request.getHeader(HttpHeaders.AUTHORIZATION);
		
		log.info("오소라이제이숀 넘어오냐 ? {}", authorization );
		if(authorization == null || !authorization.startsWith("Bearer ")) {
			filterChain.doFilter(request, response);
			return;
		}
		
		String token = authorization.split(" ")[1];
		
		log.info("토큰값 : {}", token);
		
		// 1. 토큰 만료기간 지남
		// 
		try {
			util.parseJwt(token);
		} catch (ExpiredJwtException e) {
			log.info("토큰 만료기간 지남.");
			response.setStatus(HttpServletResponse.SC_UNAUTHORIZED);
			response.getWriter().write("만료된 토큰데스");
		}
		
		doFilter(request, response, filterChain);
	}
	
	
	

}
